to switch to MySQL database, put this in the POM.XML file
---
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
---
Make sure to remove the reference to the H2 database as well




THEN add this to application.properties
--
	# DataSource settings: set here your own configurations for MySQL database 
	# connection. 
	spring.datasource.url = jdbc:mysql://localhost:3306/affablebean
	spring.datasource.username = root
	spring.datasource.password = <password here>
	spring.datasource.driverClassName=com.mysql.jdbc.Driver

	# Keep the connection alive if idle for a long time (needed in production)
	spring.datasource.testWhileIdle = true
	spring.datasource.validationQuery = SELECT 1
	
	# Show or not log for each sql query
	spring.jpa.show-sql = true
	
	# Hibernate ddl auto (create, create-drop, update)
	# comment this out if the database isn't auto-generated.
	# ALSO NEED TO REMOVE SCHEMA.SQL AND DATA.SQL FROM PROJECT IF THIS IS TAKEN OUT
	#spring.jpa.hibernate.ddl-auto = update
	
	# Naming strategy
	spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
	
	# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
	# stripped before adding them to the entity manager)
	
	# The SQL dialect makes Hibernate generate better SQL for the chosen database
	spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
--

NOTE that this setup assumes that the database already is created and populated in
MySQL.  This also requires that SCHEMA.SQL and DATA.SQL be removed from src/main/resources

If automatic creation and seeding of database is desired on each startup, uncomment 'spring.jpa.hibernate.ddl-auto'
and put SCHEMA.SQL and DATA.SQL back in src/main/resources.  The schema and data also must be compatible with MySQL!